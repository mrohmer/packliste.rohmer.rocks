datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String          @id @default(auto()) @map("_id") @db.ObjectId
  name                    String?
  code                    String?
  email                   String?         @unique
  emailVerified           DateTime?
  image                   String?
  accounts                Account[]
  sessions                Session[]
  lists                   List[]
  latelyChangedItemStates ListItemState[]
  sharedLists             ListShare[]
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model List {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  shortId   String       @unique()
  name      String
  groups    ListGroup[]
  items     ListItem[]
  userId    String       @db.ObjectId
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now())
  shares    ListShare[]
  invites   ListInvite[]

  @@unique([name, userId])
}

model ListGroup {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  shortId   String     @unique
  name      String
  order     Int
  listId    String     @db.ObjectId
  list      List       @relation(fields: [listId], references: [id], onDelete: Cascade)
  items     ListItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())

  @@unique([name, listId])
}

model ListItem {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  shortId   String         @unique
  name      String
  order     Int
  count     Int
  state     ListItemState?
  groupId   String?        @db.ObjectId
  group     ListGroup?     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  listId    String?        @db.ObjectId
  list      List?          @relation(fields: [listId], references: [id], onDelete: Cascade)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now())

  @@unique([name, listId, groupId])
}

model ListItemState {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  itemId          String   @unique @db.ObjectId
  item            ListItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  state           Int      @default(0)
  changedByUserId String   @db.ObjectId
  changedBy       User     @relation(fields: [changedByUserId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
}

model ListInvite {
  id     String    @id @default(auto()) @map("_id") @db.ObjectId
  listId String    @db.ObjectId
  list   List      @relation(fields: [listId], references: [id], onDelete: Cascade)
  role   ShareRole @default(EDIT)
  code   String    @unique

  @@unique([listId, role])
}

model ListShare {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  listId           String    @db.ObjectId
  list             List?     @relation(fields: [listId], references: [id], onDelete: Cascade)
  sharedWithUserId String    @db.ObjectId
  sharedWith       User      @relation(fields: [sharedWithUserId], references: [id], onDelete: Cascade)
  role             ShareRole @default(EDIT)

  @@unique([listId, sharedWithUserId])
}

enum ShareRole {
  SEE
  CHECK
  EDIT
  OWNER
}
