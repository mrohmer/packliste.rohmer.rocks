datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  code          String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  lists         List[]
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model List {
  id     String      @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  groups ListGroup[]
  items  ListItem[]
  userId String      @db.ObjectId
  user   User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
}

model ListGroup {
  id     String     @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  order  Int
  listId String     @db.ObjectId
  list   List       @relation(fields: [listId], references: [id], onDelete: Cascade)
  items  ListItem[]

  @@unique([name, listId])
}

model ListItem {
  id      String     @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  order   Int
  count   Int
  checked Boolean?
  groupId String?    @db.ObjectId
  group   ListGroup? @relation(fields: [groupId], references: [id], onDelete: Cascade)
  listId  String?    @db.ObjectId
  list    List?      @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@unique([name, listId, groupId])
}
